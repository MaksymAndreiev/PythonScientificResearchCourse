import warnings
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

A = np.array([1, -1, 2])
B = np.array([2, 1, 2])
C = np.array([1, 1, 4])

fig = plt.figure()
warnings.filterwarnings('ignore')  # –Ω–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
ax = Axes3D(fig)
X, Y, Z = zip(A, B, C)
ax.scatter(X, Y, Z, s=100, c='r')
ax.azim, ax.elev = 30, 20  # –∞–∑–∏–º—É—Ç —ñ –∫—É—Ç–æ–≤–∞ –≤–∏—Å–æ—Ç–∞ —Ç–æ—á–∫–∏ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è

d = np.array([B - A, C - A])
detx = np.linalg.det(d[:, 1:])
dety = np.linalg.det(d[:, [0, 2]])
detz = np.linalg.det(d[:, 0:-1])

x = np.linspace(0, 3, 61)
y = np.linspace(-2, 3, 81)
X, Y = np.meshgrid(x, y)
Z = A[2] + 1 / detz * ((Y - A[1]) * dety - (X - A[0]) * detx)

ax.plot_surface(X, Y, Z, rstride=7, cstride=7, color='c', alpha=0.5)

xAB, yAB, zAB = zip(A, B)
ax.plot(xAB, yAB, zAB, linewidth=4, c='g')
xAC, yAC, zAC = zip(A, C)
ax.plot(xAC, yAC, zAC, linewidth=4, c='g')
xCB, yCB, zCB = zip(C, B)
ax.plot(xCB, yCB, zCB, linewidth=4, c='g')

Nrm = np.cross(B - A, C - A)  # –≤–µ–∫—Ç–æ—Ä –Ω–æ—Ä–º–∞–ª—ñ –¥–æ –ø–ª–æ—â–∏–Ω–∏
S = np.linalg.norm(Nrm) / 2  # –ø–ª–æ—â–∞ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞
a = np.linalg.norm(C - B)  # –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ A
aA = np.dot(A - B, A - C) * a ** 2 / 8 / S ** 2  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç ùõºùê¥
b = np.linalg.norm(C - A)  # –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ B
aB = np.dot(B - A, B - C) * b ** 2 / 8 / S ** 2  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç ùõºùêµ
c = np.linalg.norm(B - A)  # –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∏ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ C
aC = np.dot(C - A, C - B) * c ** 2 / 8 / S ** 2  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç ùõºùê∂
O = (a * A + b * B + c * C) / (a + b + c)  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–ª–∞
print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞ –∫–æ–ª–∞:\t%8.2f%8.2f%8.2f' % (O[0], O[1], O[2]))

ax.scatter(*O, s=80, c='b')  # –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ—á–∫–∏ —Ü–µ–Ω—Ç—Ä–∞

s = (a + b + c) / 2
Rc = np.sqrt((np.abs(s - a) * np.abs(s - b) * np.abs(s - c)) / s)

ne = Nrm / np.linalg.norm(Nrm)  # –æ–¥–∏–Ω–∏—á–Ω–∏–π –≤–µ–∫—Ç–æ—Ä –Ω–æ—Ä–º–∞–ª—ñ –¥–æ –ø–ª–æ—â–∏–Ω–∏
va = (A - O) / np.linalg.norm(A - O)  # –æ–¥–∏–Ω–∏—á–Ω–∏–π –≤–µ–∫—Ç–æ—Ä ùíÇ
vb = np.cross(va, ne)  # –æ–¥–∏–Ω–∏—á–Ω–∏–π –≤–µ–∫—Ç–æ—Ä ùíÉ
t = np.linspace(0, 2 * np.pi, 51)
xcircum, ycircum, zcircum = O[:, None] + Rc * va[:, None] * np.cos(t) + Rc * vb[:, None] * np.sin(t)
ax.plot(xcircum, ycircum, zcircum, linewidth=3, c='m')

ax.quiver(*O, *(-1 * ne), linewidth=2, color='b', arrow_length_ratio=0.25)
plt.show()
